"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[8494],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>y});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=t.createContext({}),c=function(e){var n=t.useContext(b),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=c(e.components);return t.createElement(b.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,b=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(a),y=r,p=u["".concat(b,".").concat(y)]||u[y]||s[y]||o;return a?t.createElement(p,l(l({ref:n},d),{},{components:a})):t.createElement(p,l({ref:n},d))}));function y(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var b in n)hasOwnProperty.call(n,b)&&(i[b]=n[b]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},40846:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>b,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=a(87462),r=(a(67294),a(3905));const o={id:"babylond_query_bank_balances",sidebar_label:"babylond query bank balances",hide_table_of_contents:!0},l="babylond query bank balances",i={unversionedId:"cli/babylond/BabylondQuery/Babylond_query_bank/babylond_query_bank_balances",id:"cli/babylond/BabylondQuery/Babylond_query_bank/babylond_query_bank_balances",title:"babylond query bank balances",description:"Querying commands for the account balances by the specified address.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_bank/Babylond_query_bank_balances.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_bank",slug:"/cli/babylond/BabylondQuery/Babylond_query_bank/babylond_query_bank_balances",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_bank/babylond_query_bank_balances",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_bank/Babylond_query_bank_balances.md",tags:[],version:"current",frontMatter:{id:"babylond_query_bank_balances",sidebar_label:"babylond query bank balances",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query bank",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/babylond_query_bank"},next:{title:"babylond query bank denom-metadata",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_bank/babylond_query_bank_denom_metadata"}},b={},c=[{value:"query bank balances command",id:"query-bank-balances-command",level:2},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}],d={toc:c};function s(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"babylond-query-bank-balances"},"babylond query bank balances"),(0,r.kt)("p",null,"Querying commands for the account balances by the specified address."),(0,r.kt)("h2",{id:"query-bank-balances-command"},"query bank balances command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"babylond query bank balances [address] [flags]\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'      --count-total       count total number of records in all balances to query for\n      --denom string      The specific balance denomination to query for\n      --height int        Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help              help for balances\n      --limit uint        pagination limit of all balances to query for (default 100)\n      --node string       <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n      --offset uint       pagination offset of all balances to query for\n  -o, --output string     Output format (text|json) (default "text")\n      --page uint         pagination page of all balances to query for. This sets offset to a multiple of limit (default 1)\n      --page-key string   pagination page-key of all balances to query for\n      --reverse           results are sorted in descending order\n')),(0,r.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options Inherited from Parent Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'--chain-id string     The network chain ID\n--home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n--log_format string   The logging format (json|plain) (default "plain")\n--log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n--trace               print out full stack trace on errors\n')))}s.isMDXComponent=!0}}]);