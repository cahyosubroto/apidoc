"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[6040],{3905:(e,n,r)=>{r.d(n,{Zo:()=>c,kt:()=>s});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function d(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?d(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):d(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},d=Object.keys(e);for(t=0;t<d.length;t++)r=d[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(t=0;t<d.length;t++)r=d[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var b=t.createContext({}),i=function(e){var n=t.useContext(b),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},c=function(e){var n=i(e.components);return t.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,d=e.originalType,b=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=i(r),s=a,m=p["".concat(b,".").concat(s)]||p[s]||u[s]||d;return r?t.createElement(m,o(o({ref:n},c),{},{components:r})):t.createElement(m,o({ref:n},c))}));function s(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var d=r.length,o=new Array(d);o[0]=p;var l={};for(var b in n)hasOwnProperty.call(n,b)&&(l[b]=n[b]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<d;i++)o[i]=r[i];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},79615:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>b,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>l,toc:()=>i});var t=r(87462),a=(r(67294),r(3905));const d={id:"babylonddebugaddr",sidebar_label:"babylond debug addr",hide_table_of_contents:!0},o="babylond debug addr",l={unversionedId:"cli/babylond/debug/babylonddebugaddr",id:"cli/babylond/debug/babylonddebugaddr",title:"babylond debug addr",description:"Convert an address between hex and bech32.",source:"@site/docs/cli/babylond/debug/babylonddebugaddr.md",sourceDirName:"cli/babylond/debug",slug:"/cli/babylond/debug/babylonddebugaddr",permalink:"/apidoc/docs/cli/babylond/debug/babylonddebugaddr",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/debug/babylonddebugaddr.md",tags:[],version:"current",frontMatter:{id:"babylonddebugaddr",sidebar_label:"babylond debug addr",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond debug",permalink:"/apidoc/docs/cli/babylond/debug/babylonddebug"},next:{title:"babylond debug pubkey",permalink:"/apidoc/docs/cli/babylond/debug/babylonddebugpubkey"}},b={},i=[{value:"debug addr command",id:"debug-addr-command",level:2},{value:"Example Command",id:"example-command",level:3},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}],c={toc:i};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"babylond-debug-addr"},"babylond debug addr"),(0,a.kt)("p",null,"Convert an address between hex and bech32."),(0,a.kt)("h2",{id:"debug-addr-command"},"debug addr command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"babylond debug addr [address] [flag]\n")),(0,a.kt)("h3",{id:"example-command"},"Example Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ babylond debug addr cosmos12345tdzjh8p2xq95kk0exp7shwjklj\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"}," -h, --help   help for addr\n")),(0,a.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options Inherited from Parent Commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'--home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n--log_format string   The logging format (json|plain) (default "plain")\n--log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n--trace               print out full stack trace on errors\n')))}u.isMDXComponent=!0}}]);