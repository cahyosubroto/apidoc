"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[1253],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>c});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var y=n.createContext({}),i=function(e){var t=n.useContext(y),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},d=function(e){var t=i(e.components);return n.createElement(y.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,y=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),b=i(r),c=a,g=b["".concat(y,".").concat(c)]||b[c]||s[c]||o;return r?n.createElement(g,u(u({ref:t},d),{},{components:r})):n.createElement(g,u({ref:t},d))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,u=new Array(o);u[0]=b;var l={};for(var y in t)hasOwnProperty.call(t,y)&&(l[y]=t[y]);l.originalType=e,l.mdxType="string"==typeof e?e:a,u[1]=l;for(var i=2;i<o;i++)u[i]=r[i];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},58746:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>y,contentTitle:()=>u,default:()=>s,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var n=r(87462),a=(r(67294),r(3905));const o={id:"babylond_query_authz_grants_by_granter",sidebar_label:"babylond query authz grants-by-granter",hide_table_of_contents:!0},u="babylond query authz grants-by-granter",l={unversionedId:"cli/babylond/BabylondQuery/Babylond_query_authz/Babylond_query_authz_grants/babylond_query_authz_grants_by_granter",id:"cli/babylond/BabylondQuery/Babylond_query_authz/Babylond_query_authz_grants/babylond_query_authz_grants_by_granter",title:"babylond query authz grants-by-granter",description:"Querying authorization grants granted by the granter.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_authz/Babylond_query_authz_grants/Babylond_query_authz_grants_by_granter.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_authz/Babylond_query_authz_grants",slug:"/cli/babylond/BabylondQuery/Babylond_query_authz/Babylond_query_authz_grants/babylond_query_authz_grants_by_granter",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_authz/Babylond_query_authz_grants/babylond_query_authz_grants_by_granter",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_authz/Babylond_query_authz_grants/Babylond_query_authz_grants_by_granter.md",tags:[],version:"current",frontMatter:{id:"babylond_query_authz_grants_by_granter",sidebar_label:"babylond query authz grants-by-granter",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query authz grants-by-grantee",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_authz/Babylond_query_authz_grants/babylond_query_authz_grants_by_grantee"},next:{title:"babylond query bank",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/babylond_query_bank"}},y={},i=[{value:"query authz grants-by-granter command",id:"query-authz-grants-by-granter-command",level:2},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}],d={toc:i};function s(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"babylond-query-authz-grants-by-granter"},"babylond query authz grants-by-granter"),(0,a.kt)("p",null,"Querying authorization grants granted by the granter."),(0,a.kt)("h2",{id:"query-authz-grants-by-granter-command"},"query authz grants-by-granter command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"babylond query authz grants-by-granter [granter-addr] [flags]\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'      --count-total       count total number of records in granter-grants to query for\n      --height int        Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help              help for grants-by-granter\n      --limit uint        pagination limit of granter-grants to query for (default 100)\n      --node string       <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n      --offset uint       pagination offset of granter-grants to query for\n  -o, --output string     Output format (text|json) (default "text")\n      --page uint         pagination page of granter-grants to query for. This sets offset to a multiple of limit (default 1)\n      --page-key string   pagination page-key of granter-grants to query for\n      --reverse           results are sorted in descending order\n')),(0,a.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options Inherited from Parent Commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n')))}s.isMDXComponent=!0}}]);