"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[9454],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>p});var a=r(67294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var i=a.createContext({}),d=function(e){var n=a.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},u=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},y={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(r),p=t,b=c["".concat(i,".").concat(p)]||c[p]||y[p]||o;return r?a.createElement(b,l(l({ref:n},u),{},{components:r})):a.createElement(b,l({ref:n},u))}));function p(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,l=new Array(o);l[0]=c;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:t,l[1]=s;for(var d=2;d<o;d++)l[d]=r[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},72357:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=r(87462),t=(r(67294),r(3905));const o={id:"babylond_query_slashing_params",sidebar_label:"babylond query slashing params",hide_table_of_contents:!0},l="babylond query slashing params",s={unversionedId:"cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_params",id:"cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_params",title:"babylond query slashing params",description:"Querying the current slashing parameters.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/Babylond_query_slashing_params.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_slashing",slug:"/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_params",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_params",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/Babylond_query_slashing_params.md",tags:[],version:"current",frontMatter:{id:"babylond_query_slashing_params",sidebar_label:"babylond query slashing params",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query slashing",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/babylond_query_slashing"},next:{title:"babylond query slashing signing-info",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-info"}},i={},d=[{value:"query slashing params command",id:"query-slashing-params-command",level:2},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}],u={toc:d};function y(e){let{components:n,...r}=e;return(0,t.kt)("wrapper",(0,a.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"babylond-query-slashing-params"},"babylond query slashing params"),(0,t.kt)("p",null,"Querying the current slashing parameters."),(0,t.kt)("h2",{id:"query-slashing-params-command"},"query slashing params command"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"babylond query slashing params [flags]\n")),(0,t.kt)("h2",{id:"options"},"Options"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'      --height int      Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help            help for params\n      --node string     <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n  -o, --output string   Output format (text|json) (default "text")\n')),(0,t.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options Inherited from Parent Commands"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n')))}y.isMDXComponent=!0}}]);