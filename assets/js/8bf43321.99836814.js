"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[5116],{3905:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>b});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),c=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},d=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),y=c(r),b=a,m=y["".concat(i,".").concat(b)]||y[b]||p[b]||o;return r?t.createElement(m,s(s({ref:n},d),{},{components:r})):t.createElement(m,s({ref:n},d))}));function b(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=y;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}y.displayName="MDXCreateElement"},6228:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=r(87462),a=(r(67294),r(3905));const o={id:"babylondkeysparse",sidebar_label:"babylond keys parse",hide_table_of_contents:!0},s="babylond keys parse",l={unversionedId:"cli/babylond/keys/babylondkeysparse",id:"cli/babylond/keys/babylondkeysparse",title:"babylond keys parse",description:"Parse key addresses and fingerprints from hexadecimal to bech32 and vice versa.",source:"@site/docs/cli/babylond/keys/babylondkeysparse.md",sourceDirName:"cli/babylond/keys",slug:"/cli/babylond/keys/babylondkeysparse",permalink:"/docs/cli/babylond/keys/babylondkeysparse",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/keys/babylondkeysparse.md",tags:[],version:"current",frontMatter:{id:"babylondkeysparse",sidebar_label:"babylond keys parse",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond keys mnemonic",permalink:"/docs/cli/babylond/keys/babylondkeysmnemonic"},next:{title:"babylond keys rename",permalink:"/docs/cli/babylond/keys/babylondkeysrename"}},i={},c=[{value:"keys parse command",id:"keys-parse-command",level:2},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}],d={toc:c};function p(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"babylond-keys-parse"},"babylond keys parse"),(0,a.kt)("p",null,"Parse key addresses and fingerprints from hexadecimal to bech32 and vice versa."),(0,a.kt)("h2",{id:"keys-parse-command"},"keys parse command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"babylond keys parse <hex-or-bech32-address> [flags]\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"-h, --help   help for parse\n\n")),(0,a.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options Inherited from Parent Commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'      --home string              The application home directory (default "/home/<yourSystemUsername>/.babylond")\n      --keyring-backend string   Select keyring\'s backend (os|file|test) (default "os")\n      --keyring-dir string       The client Keyring directory; if omitted, the default \'home\' directory will be used\n      --log_format string        The logging format (json|plain) (default "plain")\n      --log_level string         The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --output string            Output format (text|json) (default "text")\n      --trace                    print out full stack trace on errors\n')))}p.isMDXComponent=!0}}]);