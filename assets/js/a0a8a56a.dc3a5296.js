"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[6437],{3905:(n,e,t)=>{t.d(e,{Zo:()=>b,kt:()=>u});var o=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,o,a=function(n,e){if(null==n)return{};var t,o,a={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var l=o.createContext({}),d=function(n){var e=o.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},b=function(n){var e=d(n.components);return o.createElement(l.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},y=o.forwardRef((function(n,e){var t=n.components,a=n.mdxType,r=n.originalType,l=n.parentName,b=i(n,["components","mdxType","originalType","parentName"]),y=d(t),u=a,p=y["".concat(l,".").concat(u)]||y[u]||s[u]||r;return t?o.createElement(p,c(c({ref:e},b),{},{components:t})):o.createElement(p,c({ref:e},b))}));function u(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=t.length,c=new Array(r);c[0]=y;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=n,i.mdxType="string"==typeof n?n:a,c[1]=i;for(var d=2;d<r;d++)c[d]=t[d];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}y.displayName="MDXCreateElement"},84828:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>s,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var o=t(87462),a=(t(67294),t(3905));const r={id:"Babylond_query_ibc_channel_connections",sidebar_label:"babylond query ibc channel connections",hide_table_of_contents:!0},c="babylond query ibc channel connections",i={unversionedId:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections",id:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections",title:"babylond query ibc channel connections",description:"Querying all channels associated with a connection.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel",slug:"/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_connections.md",tags:[],version:"current",frontMatter:{id:"Babylond_query_ibc_channel_connections",sidebar_label:"babylond query ibc channel connections",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query ibc channel client-state",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_client-state"},next:{title:"babylond query ibc channel end",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_ibc/Babylond_query_ibc_channel/Babylond_query_ibc_channel_end"}},l={},d=[{value:"query ibc channel connections command",id:"query-ibc-channel-connections-command",level:2},{value:"Example Command",id:"example-command",level:3},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}],b={toc:d};function s(n){let{components:e,...t}=n;return(0,a.kt)("wrapper",(0,o.Z)({},b,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"babylond-query-ibc-channel-connections"},"babylond query ibc channel connections"),(0,a.kt)("p",null,"Querying all channels associated with a connection."),(0,a.kt)("h2",{id:"query-ibc-channel-connections-command"},"query ibc channel connections command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"babylond query ibc channel connections [connection-id] [flags]\n")),(0,a.kt)("h3",{id:"example-command"},"Example Command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ babylond query ibc channel connections [connection-id]\n")),(0,a.kt)("h2",{id:"options"},"Options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'      --count-total       count total number of records in channels associated with a connection to query for\n      --height int        Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help              help for connections\n      --limit uint        pagination limit of channels associated with a connection to query for (default 100)\n      --node string       <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n      --offset uint       pagination offset of channels associated with a connection to query for\n  -o, --output string     Output format (text|json) (default "text")\n      --page uint         pagination page of channels associated with a connection to query for. This sets offset to a multiple of limit (default 1)\n      --page-key string   pagination page-key of channels associated with a connection to query for\n      --reverse           results are sorted in descending order\n')),(0,a.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options Inherited from Parent Commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n')))}s.isMDXComponent=!0}}]);