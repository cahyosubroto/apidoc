"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[8689],{3905:(e,t,o)=>{o.d(t,{Zo:()=>u,kt:()=>b});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function y(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=n.createContext({}),d=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},u=function(e){var t=d(e.components);return n.createElement(i.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,u=y(e,["components","mdxType","originalType","parentName"]),p=d(o),b=r,s=p["".concat(i,".").concat(b)]||p[b]||c[b]||a;return o?n.createElement(s,l(l({ref:t},u),{},{components:o})):n.createElement(s,l({ref:t},u))}));function b(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,l=new Array(a);l[0]=p;var y={};for(var i in t)hasOwnProperty.call(t,i)&&(y[i]=t[i]);y.originalType=e,y.mdxType="string"==typeof e?e:r,l[1]=y;for(var d=2;d<a;d++)l[d]=o[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},73225:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>y,toc:()=>d});var n=o(87462),r=(o(67294),o(3905));const a={id:"babylond_query_gov_tally",sidebar_label:"babylond query gov tally",hide_table_of_contents:!0},l="babylond query gov tally",y={unversionedId:"cli/babylond/BabylondQuery/Babylond_query_gov/babylond_query_gov_tally",id:"cli/babylond/BabylondQuery/Babylond_query_gov/babylond_query_gov_tally",title:"babylond query gov tally",description:"Get the tally of a proposal vote.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_gov/Babylond_query_gov_tally.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_gov",slug:"/cli/babylond/BabylondQuery/Babylond_query_gov/babylond_query_gov_tally",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_gov/babylond_query_gov_tally",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_gov/Babylond_query_gov_tally.md",tags:[],version:"current",frontMatter:{id:"babylond_query_gov_tally",sidebar_label:"babylond query gov tally",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query gov proposer",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_gov/babylond_query_gov_proposer"},next:{title:"babylond query gov vote",permalink:"/apidoc/docs/cli/babylond/BabylondQuery/Babylond_query_gov/babylond_query_gov_vote"}},i={},d=[{value:"query gov tally command",id:"query-gov-tally-command",level:2},{value:"Example Command",id:"example-command",level:3},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}],u={toc:d};function c(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"babylond-query-gov-tally"},"babylond query gov tally"),(0,r.kt)("p",null,"Get the tally of a proposal vote."),(0,r.kt)("h2",{id:"query-gov-tally-command"},"query gov tally command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"babylond query gov tally [proposal-id] [flags]\n")),(0,r.kt)("h3",{id:"example-command"},"Example Command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ babylond query gov tally 1\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'      --height int      Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help            help for tally\n      --node string     <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n  -o, --output string   Output format (text|json) (default "text")\n')),(0,r.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options Inherited from Parent Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n')))}c.isMDXComponent=!0}}]);