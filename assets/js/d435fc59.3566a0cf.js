"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[7412],{3905:(n,e,i)=>{i.d(e,{Zo:()=>u,kt:()=>c});var t=i(67294);function r(n,e,i){return e in n?Object.defineProperty(n,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[e]=i,n}function o(n,e){var i=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.push.apply(i,t)}return i}function a(n){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?o(Object(i),!0).forEach((function(e){r(n,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(i,e))}))}return n}function s(n,e){if(null==n)return{};var i,t,r=function(n,e){if(null==n)return{};var i,t,r={},o=Object.keys(n);for(t=0;t<o.length;t++)i=o[t],e.indexOf(i)>=0||(r[i]=n[i]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)i=o[t],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(n,i)&&(r[i]=n[i])}return r}var l=t.createContext({}),g=function(n){var e=t.useContext(l),i=e;return n&&(i="function"==typeof n?n(e):a(a({},e),n)),i},u=function(n){var e=g(n.components);return t.createElement(l.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},y=t.forwardRef((function(n,e){var i=n.components,r=n.mdxType,o=n.originalType,l=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),y=g(i),c=r,f=y["".concat(l,".").concat(c)]||y[c]||d[c]||o;return i?t.createElement(f,a(a({ref:e},u),{},{components:i})):t.createElement(f,a({ref:e},u))}));function c(n,e){var i=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=i.length,a=new Array(o);a[0]=y;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:r,a[1]=s;for(var g=2;g<o;g++)a[g]=i[g];return t.createElement.apply(null,a)}return t.createElement.apply(null,i)}y.displayName="MDXCreateElement"},27725:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>g});var t=i(87462),r=(i(67294),i(3905));const o={id:"babylond_query_slashing_signing-infos",sidebar_label:"babylond query slashing signing-infos",hide_table_of_contents:!0},a="babylond query slashing signing-infos",s={unversionedId:"cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-infos",id:"cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-infos",title:"babylond query slashing signing-infos",description:"Querying the signing information of all validators.",source:"@site/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/Babylond_query_slashing_signing-infos.md",sourceDirName:"cli/babylond/BabylondQuery/Babylond_query_slashing",slug:"/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-infos",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-infos",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/Babylond_query_slashing_signing-infos.md",tags:[],version:"current",frontMatter:{id:"babylond_query_slashing_signing-infos",sidebar_label:"babylond query slashing signing-infos",hide_table_of_contents:!0},sidebar:"docs",previous:{title:"babylond query slashing signing-info",permalink:"/docs/cli/babylond/BabylondQuery/Babylond_query_slashing/babylond_query_slashing_signing-info"},next:{title:"babylond query staking",permalink:"/docs/cli/babylond/BabylondQuery/babylond_query_staking"}},l={},g=[{value:"query slashing params signing-infos command",id:"query-slashing-params-signing-infos-command",level:2},{value:"Example Command",id:"example-command",level:3},{value:"Options",id:"options",level:2},{value:"Options Inherited from Parent Commands",id:"options-inherited-from-parent-commands",level:2}],u={toc:g};function d(n){let{components:e,...i}=n;return(0,r.kt)("wrapper",(0,t.Z)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"babylond-query-slashing-signing-infos"},"babylond query slashing signing-infos"),(0,r.kt)("p",null,"Querying the signing information of all validators."),(0,r.kt)("h2",{id:"query-slashing-params-signing-infos-command"},"query slashing params signing-infos command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"babylond query slashing signing-infos [flags]\n")),(0,r.kt)("h3",{id:"example-command"},"Example Command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ babylond query slashing signing-infos\n")),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'      --count-total       count total number of records in signing infos to query for\n      --height int        Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help              help for signing-infos\n      --limit uint        pagination limit of signing infos to query for (default 100)\n      --node string       <host>:<port> to Tendermint RPC interface for this chain (default "tcp://localhost:26657")\n      --offset uint       pagination offset of signing infos to query for\n  -o, --output string     Output format (text|json) (default "text")\n      --page uint         pagination page of signing infos to query for. This sets offset to a multiple of limit (default 1)\n      --page-key string   pagination page-key of signing infos to query for\n      --reverse           results are sorted in descending order\n')),(0,r.kt)("h2",{id:"options-inherited-from-parent-commands"},"Options Inherited from Parent Commands"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'      --chain-id string     The network chain ID\n      --home string         directory for config and data (default "/home/<yourSystemUsername>/.babylond")\n      --log_format string   The logging format (json|plain) (default "plain")\n      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default "info")\n      --trace               print out full stack trace on errors\n')))}d.isMDXComponent=!0}}]);