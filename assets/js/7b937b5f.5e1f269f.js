"use strict";(self.webpackChunkdocument_sample=self.webpackChunkdocument_sample||[]).push([[2233],{72446:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>m,default:()=>g,frontMatter:()=>c,metadata:()=>y,toc:()=>u});var i=a(87462),s=(a(67294),a(3905)),o=a(26389),n=a(94891),r=a(75190),l=a(47507),d=a(24310),h=a(63303),p=(a(75035),a(85162));const c={id:"finalized-chain-info",title:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",description:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",sidebar_label:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"FinalizedChainInfo",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{finalized_chain_info:{title:"finalized_chain_info is the info of the CZ",type:"object",properties:{chain_id:{type:"string",title:"chain_id is the ID of the chain"},latest_header:{title:"latest_header is the latest header in CZ's canonical chain",type:"object",properties:{chain_id:{type:"string",title:"chain_id is the unique ID of the chain"},hash:{type:"string",format:"byte",title:"hash is the hash of this header"},height:{type:"string",format:"uint64",title:"height is the height of this header on CZ ledger\n(hash, height) jointly provides the position of the header on CZ ledger"},babylon_header:{title:"babylon_header is the header of the babylon block that includes this CZ header",type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{title:"prev block info",type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}}},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a Tendermint block header."},babylon_epoch:{type:"string",format:"uint64",title:"epoch is the epoch number of this header on Babylon ledger"},babylon_tx_hash:{type:"string",format:"byte",title:"babylon_tx_hash is the hash of the tx that includes this header\n(babylon_block_height, babylon_tx_hash) jointly provides the position of the header on Babylon ledger"}}},latest_forks:{title:"latest_forks is the latest forks, formed as a series of IndexedHeader (from low to high)",type:"object",properties:{headers:{type:"array",items:{type:"object",properties:{chain_id:{type:"string",title:"chain_id is the unique ID of the chain"},hash:{type:"string",format:"byte",title:"hash is the hash of this header"},height:{type:"string",format:"uint64",title:"height is the height of this header on CZ ledger\n(hash, height) jointly provides the position of the header on CZ ledger"},babylon_header:{title:"babylon_header is the header of the babylon block that includes this CZ header",type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{title:"prev block info",type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}}},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a Tendermint block header."},babylon_epoch:{type:"string",format:"uint64",title:"epoch is the epoch number of this header on Babylon ledger"},babylon_tx_hash:{type:"string",format:"byte",title:"babylon_tx_hash is the hash of the tx that includes this header\n(babylon_block_height, babylon_tx_hash) jointly provides the position of the header on Babylon ledger"}},title:"IndexedHeader is the metadata of a CZ header"},title:"blocks is the list of non-canonical indexed headers at the same height"}},description:"Forks is a list of non-canonical `IndexedHeader`s at the same height.\nFor example, assuming the following blockchain\n```\nA <- B <- C <- D <- E\n            -- D1\n            -- D2\n```\nThen the fork will be {[D1, D2]} where each item is in struct `IndexedBlock`.\n\nNote that each `IndexedHeader` in the fork should have a valid quorum certificate. \nSuch forks exist since Babylon considers CZs might have dishonest majority.\nAlso note that the IBC-Go implementation will only consider the first header in a fork valid, since\nthe subsequent headers cannot be verified without knowing the validator set in the previous header."},timestamped_headers_count:{type:"string",format:"uint64",title:"timestamped_headers_count is the number of timestamped headers in CZ's canonical chain"}}},epoch_info:{title:"epoch_info is the metadata of the last BTC-finalised epoch",type:"object",properties:{epoch_number:{type:"string",format:"uint64"},current_epoch_interval:{type:"string",format:"uint64"},first_block_height:{type:"string",format:"uint64"},last_block_header:{description:"last_block_header is the header of the last block in this epoch.\nBabylon needs to remember the last header of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised.\nThe last_block_header field is nil in the epoch's beginning, and is set upon the end of this epoch.",type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{title:"prev block info",type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}}},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}}},app_hash_root:{type:"string",format:"byte",title:"app_hash_root is the Merkle root of all AppHashs in this epoch\nIt will be used for proving a block is in an epoch"},sealer_header:{title:"sealer_header is the 2nd header of the next epoch\nThis validator set has generated a BLS multisig on `last_commit_hash` of the sealer header",type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{title:"prev block info",type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}}},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a Tendermint block header."}}},raw_checkpoint:{title:"raw_checkpoint is the raw checkpoint of this epoch",type:"object",properties:{epoch_num:{type:"string",format:"uint64",title:"epoch_num defines the epoch number the raw checkpoint is for"},last_commit_hash:{type:"string",format:"byte",title:"last_commit_hash defines the 'LastCommitHash' that individual BLS sigs are signed on"},bitmap:{type:"string",format:"byte",title:"bitmap defines the bitmap that indicates the signers of the BLS multi sig"},bls_multi_sig:{type:"string",format:"byte",title:"bls_multi_sig defines the multi sig that is aggregated from individual BLS sigs"}}},btc_submission_key:{title:"btc_submission_key is position of two BTC txs that include the raw checkpoint of this epoch",type:"object",properties:{key:{type:"array",items:{type:"object",properties:{index:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"Each provided OP_RETURN transaction can be idendtified by hash of block in\nwhich transaction was included and transaction index in the block"}}}},proof:{title:"proof is the proof that the chain info is finalized",type:"object",properties:{proof_tx_in_block:{title:"proof_tx_in_block is the proof that tx that carries the header is included in a certain Babylon block",type:"object",properties:{root_hash:{type:"string",format:"byte"},data:{type:"string",format:"byte"},proof:{type:"object",properties:{total:{type:"string",format:"int64"},index:{type:"string",format:"int64"},leaf_hash:{type:"string",format:"byte"},aunts:{type:"array",items:{type:"string",format:"byte"}}}}},description:"TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree."},proof_header_in_epoch:{type:"object",properties:{total:{type:"string",format:"int64"},index:{type:"string",format:"int64"},leaf_hash:{type:"string",format:"byte"},aunts:{type:"array",items:{type:"string",format:"byte"}}},title:"proof_header_in_epoch is the proof that the Babylon header is in a certain epoch"},proof_epoch_sealed:{title:"proof_epoch_sealed is the proof that the epoch is sealed",type:"object",properties:{validator_set:{type:"array",items:{type:"object",properties:{validator_address:{type:"string"},bls_pub_key:{type:"string",format:"byte"},voting_power:{type:"string",format:"uint64"}},title:"ValidatorWithBlsKey couples validator address, voting power, and its bls public key"},title:"validator_set is the validator set of the sealed epoch\nThis validator set has generated a BLS multisig on `last_commit_hash` of the sealer header"},proof_epoch_info:{title:"proof_epoch_info is the Merkle proof that the epoch's metadata is committed to `app_hash` of the sealer header",type:"object",properties:{ops:{type:"array",items:{type:"object",properties:{type:{type:"string"},key:{type:"string",format:"byte"},data:{type:"string",format:"byte"}},title:"ProofOp defines an operation used for calculating Merkle root\nThe data could be arbitrary format, providing nessecary data\nfor example neighbouring node hash"}}}},proof_epoch_val_set:{title:"proof_epoch_info is the Merkle proof that the epoch's validator set is committed to `app_hash` of the sealer header",type:"object",properties:{ops:{type:"array",items:{type:"object",properties:{type:{type:"string"},key:{type:"string",format:"byte"},data:{type:"string",format:"byte"}},title:"ProofOp defines an operation used for calculating Merkle root\nThe data could be arbitrary format, providing nessecary data\nfor example neighbouring node hash"}}}}}},proof_epoch_submitted:{type:"array",items:{type:"object",properties:{key:{type:"object",properties:{index:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"Each provided OP_RETURN transaction can be idendtified by hash of block in\nwhich transaction was included and transaction index in the block",description:"key is the position (txIdx, blockHash) of this tx on BTC blockchain\nAlthough it is already a part of SubmissionKey, we store it here again\nto make TransactionInfo self-contained.\nFor example, storing the key allows TransactionInfo to not relay on \nthe fact that TransactionInfo will be ordered in the same order as \nTransactionKeys in SubmissionKey."},transaction:{type:"string",format:"byte",title:"transaction is the full transaction in bytes"},proof:{type:"string",format:"byte",title:"proof is the Merkle proof that this tx is included in the position in `key`\nTODO: maybe it could use here better format as we already processed and \nvalideated the proof?"}},title:"TransactionInfo is the info of a tx that contains Babylon checkpoint, including\n- the position of the tx on BTC blockchain\n- the full tx content\n- the Merkle proof that this tx is on the above position"},title:"proof_epoch_submitted is the proof that the epoch's checkpoint is included in BTC ledger\nIt is the two TransactionInfo in the best (i.e., earliest) checkpoint submission"}}}},description:"QueryFinalizedChainInfoResponse is response type for the Query/FinalizedChainInfo RPC method."}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},value:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."}},description:'`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\nmethods only use the fully qualified type name after the last \'/\'\nin the type URL, for example "foo.bar.com/x/y.z" will yield type\nname "y.z".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      "@type": "type.googleapis.com/google.profile.Person",\n      "firstName": <string>,\n      "lastName": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      "@type": "type.googleapis.com/google.protobuf.Duration",\n      "value": "1.212s"\n    }'}}}}}}}},parameters:[{name:"chain_id",description:"chain_id is the ID of the CZ",in:"path",required:!0,schema:{type:"string"}},{name:"prove",description:"prove indicates whether the querier wants to get proofs of this timestamp.",in:"query",required:!1,schema:{type:"boolean"}}],tags:["Query"],description:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",method:"get",path:"/babylon/zoneconcierge/v1/finalized_chain_info/{chain_id}",info:{title:"Babylon - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",description:{type:"text/plain"},url:{path:["babylon","zoneconcierge","v1","finalized_chain_info",":chain_id"],host:["{{baseUrl}}"],query:[{disabled:!1,description:{content:"prove indicates whether the querier wants to get proofs of this timestamp.",type:"text/plain"},key:"prove",value:""}],variable:[{disabled:!1,description:{content:"(Required) chain_id is the ID of the CZ",type:"text/plain"},type:"any",value:"",key:"chain_id"}]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/grpcrestapi/babylon-grpc-gateway-docs",custom_edit_url:null},m=void 0,y={unversionedId:"api/grpcrestapi/finalized-chain-info",id:"api/grpcrestapi/finalized-chain-info",title:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",description:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",source:"@site/docs/api/grpcrestapi/finalized-chain-info.api.mdx",sourceDirName:"api/grpcrestapi",slug:"/api/grpcrestapi/finalized-chain-info",permalink:"/docs/api/grpcrestapi/finalized-chain-info",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"finalized-chain-info",title:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",description:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",sidebar_label:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",hide_title:!0,hide_table_of_contents:!0,api:{operationId:"FinalizedChainInfo",responses:{200:{description:"A successful response.",content:{"*/*":{schema:{type:"object",properties:{finalized_chain_info:{title:"finalized_chain_info is the info of the CZ",type:"object",properties:{chain_id:{type:"string",title:"chain_id is the ID of the chain"},latest_header:{title:"latest_header is the latest header in CZ's canonical chain",type:"object",properties:{chain_id:{type:"string",title:"chain_id is the unique ID of the chain"},hash:{type:"string",format:"byte",title:"hash is the hash of this header"},height:{type:"string",format:"uint64",title:"height is the height of this header on CZ ledger\n(hash, height) jointly provides the position of the header on CZ ledger"},babylon_header:{title:"babylon_header is the header of the babylon block that includes this CZ header",type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{title:"prev block info",type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}}},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a Tendermint block header."},babylon_epoch:{type:"string",format:"uint64",title:"epoch is the epoch number of this header on Babylon ledger"},babylon_tx_hash:{type:"string",format:"byte",title:"babylon_tx_hash is the hash of the tx that includes this header\n(babylon_block_height, babylon_tx_hash) jointly provides the position of the header on Babylon ledger"}}},latest_forks:{title:"latest_forks is the latest forks, formed as a series of IndexedHeader (from low to high)",type:"object",properties:{headers:{type:"array",items:{type:"object",properties:{chain_id:{type:"string",title:"chain_id is the unique ID of the chain"},hash:{type:"string",format:"byte",title:"hash is the hash of this header"},height:{type:"string",format:"uint64",title:"height is the height of this header on CZ ledger\n(hash, height) jointly provides the position of the header on CZ ledger"},babylon_header:{title:"babylon_header is the header of the babylon block that includes this CZ header",type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{title:"prev block info",type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}}},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a Tendermint block header."},babylon_epoch:{type:"string",format:"uint64",title:"epoch is the epoch number of this header on Babylon ledger"},babylon_tx_hash:{type:"string",format:"byte",title:"babylon_tx_hash is the hash of the tx that includes this header\n(babylon_block_height, babylon_tx_hash) jointly provides the position of the header on Babylon ledger"}},title:"IndexedHeader is the metadata of a CZ header"},title:"blocks is the list of non-canonical indexed headers at the same height"}},description:"Forks is a list of non-canonical `IndexedHeader`s at the same height.\nFor example, assuming the following blockchain\n```\nA <- B <- C <- D <- E\n           \\ -- D1\n           \\ -- D2\n```\nThen the fork will be {[D1, D2]} where each item is in struct `IndexedBlock`.\n\nNote that each `IndexedHeader` in the fork should have a valid quorum certificate. \nSuch forks exist since Babylon considers CZs might have dishonest majority.\nAlso note that the IBC-Go implementation will only consider the first header in a fork valid, since\nthe subsequent headers cannot be verified without knowing the validator set in the previous header."},timestamped_headers_count:{type:"string",format:"uint64",title:"timestamped_headers_count is the number of timestamped headers in CZ's canonical chain"}}},epoch_info:{title:"epoch_info is the metadata of the last BTC-finalised epoch",type:"object",properties:{epoch_number:{type:"string",format:"uint64"},current_epoch_interval:{type:"string",format:"uint64"},first_block_height:{type:"string",format:"uint64"},last_block_header:{description:"last_block_header is the header of the last block in this epoch.\nBabylon needs to remember the last header of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised.\nThe last_block_header field is nil in the epoch's beginning, and is set upon the end of this epoch.",type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{title:"prev block info",type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}}},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}}},app_hash_root:{type:"string",format:"byte",title:"app_hash_root is the Merkle root of all AppHashs in this epoch\nIt will be used for proving a block is in an epoch"},sealer_header:{title:"sealer_header is the 2nd header of the next epoch\nThis validator set has generated a BLS multisig on `last_commit_hash` of the sealer header",type:"object",properties:{version:{title:"basic block info",type:"object",properties:{block:{type:"string",format:"uint64"},app:{type:"string",format:"uint64"}},description:"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine."},chain_id:{type:"string"},height:{type:"string",format:"int64"},time:{type:"string",format:"date-time"},last_block_id:{title:"prev block info",type:"object",properties:{hash:{type:"string",format:"byte"},part_set_header:{type:"object",properties:{total:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"PartsetHeader"}}},last_commit_hash:{type:"string",format:"byte",title:"hashes of block data"},data_hash:{type:"string",format:"byte"},validators_hash:{type:"string",format:"byte",title:"hashes from the app output from the prev block"},next_validators_hash:{type:"string",format:"byte"},consensus_hash:{type:"string",format:"byte"},app_hash:{type:"string",format:"byte"},last_results_hash:{type:"string",format:"byte"},evidence_hash:{type:"string",format:"byte",title:"consensus info"},proposer_address:{type:"string",format:"byte"}},description:"Header defines the structure of a Tendermint block header."}}},raw_checkpoint:{title:"raw_checkpoint is the raw checkpoint of this epoch",type:"object",properties:{epoch_num:{type:"string",format:"uint64",title:"epoch_num defines the epoch number the raw checkpoint is for"},last_commit_hash:{type:"string",format:"byte",title:"last_commit_hash defines the 'LastCommitHash' that individual BLS sigs are signed on"},bitmap:{type:"string",format:"byte",title:"bitmap defines the bitmap that indicates the signers of the BLS multi sig"},bls_multi_sig:{type:"string",format:"byte",title:"bls_multi_sig defines the multi sig that is aggregated from individual BLS sigs"}}},btc_submission_key:{title:"btc_submission_key is position of two BTC txs that include the raw checkpoint of this epoch",type:"object",properties:{key:{type:"array",items:{type:"object",properties:{index:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"Each provided OP_RETURN transaction can be idendtified by hash of block in\nwhich transaction was included and transaction index in the block"}}}},proof:{title:"proof is the proof that the chain info is finalized",type:"object",properties:{proof_tx_in_block:{title:"proof_tx_in_block is the proof that tx that carries the header is included in a certain Babylon block",type:"object",properties:{root_hash:{type:"string",format:"byte"},data:{type:"string",format:"byte"},proof:{type:"object",properties:{total:{type:"string",format:"int64"},index:{type:"string",format:"int64"},leaf_hash:{type:"string",format:"byte"},aunts:{type:"array",items:{type:"string",format:"byte"}}}}},description:"TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree."},proof_header_in_epoch:{type:"object",properties:{total:{type:"string",format:"int64"},index:{type:"string",format:"int64"},leaf_hash:{type:"string",format:"byte"},aunts:{type:"array",items:{type:"string",format:"byte"}}},title:"proof_header_in_epoch is the proof that the Babylon header is in a certain epoch"},proof_epoch_sealed:{title:"proof_epoch_sealed is the proof that the epoch is sealed",type:"object",properties:{validator_set:{type:"array",items:{type:"object",properties:{validator_address:{type:"string"},bls_pub_key:{type:"string",format:"byte"},voting_power:{type:"string",format:"uint64"}},title:"ValidatorWithBlsKey couples validator address, voting power, and its bls public key"},title:"validator_set is the validator set of the sealed epoch\nThis validator set has generated a BLS multisig on `last_commit_hash` of the sealer header"},proof_epoch_info:{title:"proof_epoch_info is the Merkle proof that the epoch's metadata is committed to `app_hash` of the sealer header",type:"object",properties:{ops:{type:"array",items:{type:"object",properties:{type:{type:"string"},key:{type:"string",format:"byte"},data:{type:"string",format:"byte"}},title:"ProofOp defines an operation used for calculating Merkle root\nThe data could be arbitrary format, providing nessecary data\nfor example neighbouring node hash"}}}},proof_epoch_val_set:{title:"proof_epoch_info is the Merkle proof that the epoch's validator set is committed to `app_hash` of the sealer header",type:"object",properties:{ops:{type:"array",items:{type:"object",properties:{type:{type:"string"},key:{type:"string",format:"byte"},data:{type:"string",format:"byte"}},title:"ProofOp defines an operation used for calculating Merkle root\nThe data could be arbitrary format, providing nessecary data\nfor example neighbouring node hash"}}}}}},proof_epoch_submitted:{type:"array",items:{type:"object",properties:{key:{type:"object",properties:{index:{type:"integer",format:"int64"},hash:{type:"string",format:"byte"}},title:"Each provided OP_RETURN transaction can be idendtified by hash of block in\nwhich transaction was included and transaction index in the block",description:"key is the position (txIdx, blockHash) of this tx on BTC blockchain\nAlthough it is already a part of SubmissionKey, we store it here again\nto make TransactionInfo self-contained.\nFor example, storing the key allows TransactionInfo to not relay on \nthe fact that TransactionInfo will be ordered in the same order as \nTransactionKeys in SubmissionKey."},transaction:{type:"string",format:"byte",title:"transaction is the full transaction in bytes"},proof:{type:"string",format:"byte",title:"proof is the Merkle proof that this tx is included in the position in `key`\nTODO: maybe it could use here better format as we already processed and \nvalideated the proof?"}},title:"TransactionInfo is the info of a tx that contains Babylon checkpoint, including\n- the position of the tx on BTC blockchain\n- the full tx content\n- the Merkle proof that this tx is on the above position"},title:"proof_epoch_submitted is the proof that the epoch's checkpoint is included in BTC ledger\nIt is the two TransactionInfo in the best (i.e., earliest) checkpoint submission"}}}},description:"QueryFinalizedChainInfoResponse is response type for the Query/FinalizedChainInfo RPC method."}}}},default:{description:"An unexpected error response.",content:{"*/*":{schema:{type:"object",properties:{error:{type:"string"},code:{type:"integer",format:"int32"},message:{type:"string"},details:{type:"array",items:{type:"object",properties:{type_url:{type:"string",description:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.'},value:{type:"string",format:"byte",description:"Must be a valid serialized protocol buffer of the above specified type."}},description:'`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n\'type.googleapis.com/full.type.name\' as the type URL and the unpack\nmethods only use the fully qualified type name after the last \'/\'\nin the type URL, for example "foo.bar.com/x/y.z" will yield type\nname "y.z".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      "@type": "type.googleapis.com/google.profile.Person",\n      "firstName": <string>,\n      "lastName": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      "@type": "type.googleapis.com/google.protobuf.Duration",\n      "value": "1.212s"\n    }'}}}}}}}},parameters:[{name:"chain_id",description:"chain_id is the ID of the CZ",in:"path",required:!0,schema:{type:"string"}},{name:"prove",description:"prove indicates whether the querier wants to get proofs of this timestamp.",in:"query",required:!1,schema:{type:"boolean"}}],tags:["Query"],description:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",method:"get",path:"/babylon/zoneconcierge/v1/finalized_chain_info/{chain_id}",info:{title:"Babylon - gRPC Gateway docs",description:"A REST interface for state queries",version:"1.0.0"},postman:{name:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",description:{type:"text/plain"},url:{path:["babylon","zoneconcierge","v1","finalized_chain_info",":chain_id"],host:["{{baseUrl}}"],query:[{disabled:!1,description:{content:"prove indicates whether the querier wants to get proofs of this timestamp.",type:"text/plain"},key:"prove",value:""}],variable:[{disabled:!1,description:{content:"(Required) chain_id is the ID of the CZ",type:"text/plain"},type:"any",value:"",key:"chain_id"}]},header:[{key:"Accept",value:"*/*"}],method:"GET"}},sidebar_class_name:"get api-method",info_path:"api/grpcrestapi/babylon-grpc-gateway-docs",custom_edit_url:null}},f={},u=[{value:"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs",id:"finalizedchaininfo-queries-the-btc-finalised-info-of-a-chain-with-proofs",level:2}],b={toc:u};function g(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,i.Z)({},b,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"finalizedchaininfo-queries-the-btc-finalised-info-of-a-chain-with-proofs"},"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs"),(0,s.kt)("p",null,"FinalizedChainInfo queries the BTC-finalised info of a chain, with proofs"),(0,s.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"Path Parameters")),(0,s.kt)("div",null,(0,s.kt)("ul",null,(0,s.kt)(r.Z,{className:"paramsItem",param:{name:"chain_id",description:"chain_id is the ID of the CZ",in:"path",required:!0,schema:{type:"string"}},mdxType:"ParamsItem"})))),(0,s.kt)("details",{style:{marginBottom:"1rem"},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"Query Parameters")),(0,s.kt)("div",null,(0,s.kt)("ul",null,(0,s.kt)(r.Z,{className:"paramsItem",param:{name:"prove",description:"prove indicates whether the querier wants to get proofs of this timestamp.",in:"query",required:!1,schema:{type:"boolean"}},mdxType:"ParamsItem"})))),(0,s.kt)("div",null,(0,s.kt)(o.Z,{mdxType:"ApiTabs"},(0,s.kt)(p.Z,{label:"200",value:"200",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"A successful response.")),(0,s.kt)("div",null,(0,s.kt)(n.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(p.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,s.kt)(h.Z,{mdxType:"SchemaTabs"},(0,s.kt)(p.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"finalized_chain_info"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"chain_id",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"chain_id is the ID of the chain",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"latest_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"chain_id",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"chain_id is the unique ID of the chain",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"height",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"babylon_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Header defines the structure of a Tendermint block header.")),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"version"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine.")),(0,s.kt)(d.Z,{collapsible:!1,name:"block",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"app",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!1,name:"chain_id",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"height",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"time",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"date-time",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"last_block_id"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"part_set_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"total",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!1,name:"last_commit_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"data_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"validators_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"next_validators_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"consensus_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"app_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"last_results_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"evidence_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"proposer_address",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!1,name:"babylon_epoch",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"babylon_tx_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"latest_forks"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Forks is a list of non-canonical ",(0,s.kt)("inlineCode",{parentName:"p"},"IndexedHeader"),"s at the same height.\nFor example, assuming the following blockchain"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"A <- B <- C <- D <- E\n           \\ -- D1\n           \\ -- D2\n")),(0,s.kt)("p",null,"Then the fork will be {","[D1, D2]","} where each item is in struct ",(0,s.kt)("inlineCode",{parentName:"p"},"IndexedBlock"),"."),(0,s.kt)("p",null,"Note that each ",(0,s.kt)("inlineCode",{parentName:"p"},"IndexedHeader")," in the fork should have a valid quorum certificate.\nSuch forks exist since Babylon considers CZs might have dishonest majority.\nAlso note that the IBC-Go implementation will only consider the first header in a fork valid, since\nthe subsequent headers cannot be verified without knowing the validator set in the previous header.")),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"headers"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"chain_id",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"chain_id is the unique ID of the chain",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"height",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"babylon_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Header defines the structure of a Tendermint block header.")),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"version"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine.")),(0,s.kt)(d.Z,{collapsible:!1,name:"block",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"app",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!1,name:"chain_id",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"height",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"time",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"date-time",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"last_block_id"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"part_set_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"total",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!1,name:"last_commit_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"data_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"validators_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"next_validators_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"consensus_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"app_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"last_results_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"evidence_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"proposer_address",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!1,name:"babylon_epoch",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"babylon_tx_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!1,name:"timestamped_headers_count",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"epoch_info"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"epoch_number",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"current_epoch_interval",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"first_block_height",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"last_block_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"last_block_header is the header of the last block in this epoch.\nBabylon needs to remember the last header of each epoch to complete unbonding validators/delegations when a previous epoch's checkpoint is finalised.\nThe last_block_header field is nil in the epoch's beginning, and is set upon the end of this epoch.")),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"version"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine.")),(0,s.kt)(d.Z,{collapsible:!1,name:"block",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"app",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!1,name:"chain_id",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"height",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"time",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"date-time",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"last_block_id"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"part_set_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"total",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!1,name:"last_commit_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"data_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"validators_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"next_validators_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"consensus_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"app_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"last_results_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"evidence_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"proposer_address",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!1,name:"app_hash_root",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"sealer_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Header defines the structure of a Tendermint block header.")),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"version"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"Consensus captures the consensus rules for processing a block in the blockchain,\nincluding all blockchain data structures and the rules of the application's\nstate transition machine.")),(0,s.kt)(d.Z,{collapsible:!1,name:"block",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"app",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!1,name:"chain_id",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"height",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"time",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"date-time",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"last_block_id"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"part_set_header"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"total",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!1,name:"last_commit_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"data_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"validators_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"next_validators_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"consensus_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"app_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"last_results_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"evidence_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"proposer_address",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"raw_checkpoint"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"epoch_num",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"last_commit_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"bitmap",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"bls_multi_sig",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"btc_submission_key"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"key"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"index",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"proof"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"proof_tx_in_block"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.")),(0,s.kt)(d.Z,{collapsible:!1,name:"root_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"data",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"proof"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"total",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"index",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"leaf_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"aunts",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte[]",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"proof_header_in_epoch"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"total",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"index",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"leaf_hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"aunts",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte[]",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"proof_epoch_sealed"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"validator_set"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"validator_address",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"bls_pub_key",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"voting_power",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"uint64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"proof_epoch_info"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"ops"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"type",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"key",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"data",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"proof_epoch_val_set"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"ops"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"type",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"key",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"data",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))))))))),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"proof_epoch_submitted"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"key"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)("div",{style:{marginTop:".5rem",marginBottom:".5rem"}},(0,s.kt)("p",null,"key is the position (txIdx, blockHash) of this tx on BTC blockchain\nAlthough it is already a part of SubmissionKey, we store it here again\nto make TransactionInfo self-contained.\nFor example, storing the key allows TransactionInfo to not relay on\nthe fact that TransactionInfo will be ordered in the same order as\nTransactionKeys in SubmissionKey.")),(0,s.kt)(d.Z,{collapsible:!1,name:"index",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int64",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"hash",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))),(0,s.kt)(d.Z,{collapsible:!1,name:"transaction",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"proof",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"})))))))))),(0,s.kt)(p.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(l.Z,{responseExample:'{\n  "finalized_chain_info": {\n    "chain_id": "string",\n    "latest_header": {\n      "chain_id": "string",\n      "hash": "string",\n      "height": "string",\n      "babylon_header": {\n        "version": {\n          "block": "string",\n          "app": "string"\n        },\n        "chain_id": "string",\n        "height": "string",\n        "time": "2023-01-13",\n        "last_block_id": {\n          "hash": "string",\n          "part_set_header": {\n            "total": 0,\n            "hash": "string"\n          }\n        },\n        "last_commit_hash": "string",\n        "data_hash": "string",\n        "validators_hash": "string",\n        "next_validators_hash": "string",\n        "consensus_hash": "string",\n        "app_hash": "string",\n        "last_results_hash": "string",\n        "evidence_hash": "string",\n        "proposer_address": "string"\n      },\n      "babylon_epoch": "string",\n      "babylon_tx_hash": "string"\n    },\n    "latest_forks": {\n      "headers": [\n        {\n          "chain_id": "string",\n          "hash": "string",\n          "height": "string",\n          "babylon_header": {\n            "version": {\n              "block": "string",\n              "app": "string"\n            },\n            "chain_id": "string",\n            "height": "string",\n            "time": "2023-01-13",\n            "last_block_id": {\n              "hash": "string",\n              "part_set_header": {\n                "total": 0,\n                "hash": "string"\n              }\n            },\n            "last_commit_hash": "string",\n            "data_hash": "string",\n            "validators_hash": "string",\n            "next_validators_hash": "string",\n            "consensus_hash": "string",\n            "app_hash": "string",\n            "last_results_hash": "string",\n            "evidence_hash": "string",\n            "proposer_address": "string"\n          },\n          "babylon_epoch": "string",\n          "babylon_tx_hash": "string"\n        }\n      ]\n    },\n    "timestamped_headers_count": "string"\n  },\n  "epoch_info": {\n    "epoch_number": "string",\n    "current_epoch_interval": "string",\n    "first_block_height": "string",\n    "last_block_header": {\n      "version": {\n        "block": "string",\n        "app": "string"\n      },\n      "chain_id": "string",\n      "height": "string",\n      "time": "2023-01-13",\n      "last_block_id": {\n        "hash": "string",\n        "part_set_header": {\n          "total": 0,\n          "hash": "string"\n        }\n      },\n      "last_commit_hash": "string",\n      "data_hash": "string",\n      "validators_hash": "string",\n      "next_validators_hash": "string",\n      "consensus_hash": "string",\n      "app_hash": "string",\n      "last_results_hash": "string",\n      "evidence_hash": "string",\n      "proposer_address": "string"\n    },\n    "app_hash_root": "string",\n    "sealer_header": {\n      "version": {\n        "block": "string",\n        "app": "string"\n      },\n      "chain_id": "string",\n      "height": "string",\n      "time": "2023-01-13",\n      "last_block_id": {\n        "hash": "string",\n        "part_set_header": {\n          "total": 0,\n          "hash": "string"\n        }\n      },\n      "last_commit_hash": "string",\n      "data_hash": "string",\n      "validators_hash": "string",\n      "next_validators_hash": "string",\n      "consensus_hash": "string",\n      "app_hash": "string",\n      "last_results_hash": "string",\n      "evidence_hash": "string",\n      "proposer_address": "string"\n    }\n  },\n  "raw_checkpoint": {\n    "epoch_num": "string",\n    "last_commit_hash": "string",\n    "bitmap": "string",\n    "bls_multi_sig": "string"\n  },\n  "btc_submission_key": {\n    "key": [\n      {\n        "index": 0,\n        "hash": "string"\n      }\n    ]\n  },\n  "proof": {\n    "proof_tx_in_block": {\n      "root_hash": "string",\n      "data": "string",\n      "proof": {\n        "total": "string",\n        "index": "string",\n        "leaf_hash": "string",\n        "aunts": [\n          "string"\n        ]\n      }\n    },\n    "proof_header_in_epoch": {\n      "total": "string",\n      "index": "string",\n      "leaf_hash": "string",\n      "aunts": [\n        "string"\n      ]\n    },\n    "proof_epoch_sealed": {\n      "validator_set": [\n        {\n          "validator_address": "string",\n          "bls_pub_key": "string",\n          "voting_power": "string"\n        }\n      ],\n      "proof_epoch_info": {\n        "ops": [\n          {\n            "type": "string",\n            "key": "string",\n            "data": "string"\n          }\n        ]\n      },\n      "proof_epoch_val_set": {\n        "ops": [\n          {\n            "type": "string",\n            "key": "string",\n            "data": "string"\n          }\n        ]\n      }\n    },\n    "proof_epoch_submitted": [\n      {\n        "key": {\n          "index": 0,\n          "hash": "string"\n        },\n        "transaction": "string",\n        "proof": "string"\n      }\n    ]\n  }\n}',language:"json",mdxType:"ResponseSamples"}))))))),(0,s.kt)(p.Z,{label:"default",value:"default",mdxType:"TabItem"},(0,s.kt)("div",null,(0,s.kt)("p",null,"An unexpected error response.")),(0,s.kt)("div",null,(0,s.kt)(n.Z,{schemaType:"response",mdxType:"MimeTabs"},(0,s.kt)(p.Z,{label:"*/*",value:"*/*",mdxType:"TabItem"},(0,s.kt)(h.Z,{mdxType:"SchemaTabs"},(0,s.kt)(p.Z,{label:"Schema",value:"Schema",mdxType:"TabItem"},(0,s.kt)("details",{style:{},"data-collapsed":!1,open:!0},(0,s.kt)("summary",{style:{textAlign:"left"}},(0,s.kt)("strong",null,"Schema")),(0,s.kt)("div",{style:{textAlign:"left",marginLeft:"1rem"}}),(0,s.kt)("ul",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"error",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"code",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"int32",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"message",required:!1,deprecated:void 0,schemaDescription:void 0,schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!0,className:"schemaItem",mdxType:"SchemaItem"},(0,s.kt)("details",{style:{}},(0,s.kt)("summary",{style:{}},(0,s.kt)("strong",null,"details"),(0,s.kt)("span",{style:{opacity:"0.6"}}," object[]")),(0,s.kt)("div",{style:{marginLeft:"1rem"}},(0,s.kt)(d.Z,{collapsible:!1,name:"type_url",required:!1,deprecated:void 0,schemaDescription:'A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none "/" character. The last segment of the URL\'s path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading "." is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.',schemaName:"string",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}),(0,s.kt)(d.Z,{collapsible:!1,name:"value",required:!1,deprecated:void 0,schemaDescription:"Must be a valid serialized protocol buffer of the above specified type.",schemaName:"byte",qualifierMessage:void 0,defaultValue:void 0,mdxType:"SchemaItem"}))))))),(0,s.kt)(p.Z,{label:"Example (from schema)",value:"Example (from schema)",mdxType:"TabItem"},(0,s.kt)(l.Z,{responseExample:'{\n  "error": "string",\n  "code": 0,\n  "message": "string",\n  "details": [\n    {\n      "type_url": "string",\n      "value": "string"\n    }\n  ]\n}',language:"json",mdxType:"ResponseSamples"}))))))))))}g.isMDXComponent=!0}}]);